
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\004\005\000\002\004\002\000\002\005\004" +
    "\000\002\006\004\000\002\006\002\000\002\007\003\000" +
    "\002\007\003\000\002\011\003\000\002\010\003\000\002" +
    "\010\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\016\006\000\002\034\004" +
    "\000\002\021\003\000\002\021\004\000\002\021\004\000" +
    "\002\021\004\000\002\021\004\000\002\023\004\000\002" +
    "\024\005\000\002\025\007\000\002\025\011\000\002\026" +
    "\003\000\002\026\002\000\002\027\005\000\002\030\003" +
    "\000\002\030\002\000\002\031\004\000\002\032\003\000" +
    "\002\032\002\000\002\033\005\000\002\037\006\000\002" +
    "\040\006\000\002\040\005\000\002\043\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\004" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\044\003\000\002\044\002\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\003\000\002\047\004\000\002\050\003\000\002\050\003" +
    "\000\002\051\005\000\002\052\004\000\002\053\003\000" +
    "\002\053\003\000\002\053\002\000\002\054\007\000\002" +
    "\055\004\000\002\055\002\000\002\056\004\000\002\056" +
    "\002\000\002\057\003\000\002\057\003\000\002\060\003" +
    "\000\002\071\010\000\002\072\004\000\002\072\002\000" +
    "\002\073\003\000\002\073\002\000\002\074\004\000\002" +
    "\074\002\000\002\075\005\000\002\076\004\000\002\076" +
    "\003\000\002\065\005\000\002\100\003\000\002\100\003" +
    "\000\002\100\002\000\002\101\003\000\002\102\007\000" +
    "\002\103\003\000\002\103\002\000\002\104\003\000\002" +
    "\104\002\000\002\105\003\000\002\105\002\000\002\106" +
    "\003\000\002\107\003\000\002\062\004\000\002\110\003" +
    "\000\002\110\002\000\002\063\003\000\002\116\006\000" +
    "\002\122\005\000\002\122\002\000\002\113\004\000\002" +
    "\113\002\000\002\111\004\000\002\017\003\000\002\114" +
    "\004\000\002\112\003\000\002\112\005\000\002\121\005" +
    "\000\002\121\002\000\002\117\004\000\002\120\003\000" +
    "\002\120\003\000\002\120\002\000\002\123\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\057\005\001\002\000\004\002\007\001" +
    "\002\000\004\056\006\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= package_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // package_list ::= PACKAGE IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // element_list ::= keyed_element sub_element_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sub_element_list ::= COMMA keyed_element sub_element_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_element_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sub_element_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_element_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // keyed_element ::= sub_keyed_element element 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyed_element",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sub_keyed_element ::= key COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_keyed_element",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sub_keyed_element ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_keyed_element",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // key ::= field_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // key ::= literal_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_name",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // element ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // element ::= literal_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // basic_lit ::= INT_LIT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // basic_lit ::= STRING_TEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operand_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operand_name ::= qualified_ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // qualified_ident ::= DOT package_name DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_ident",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_lit ::= FUNC function 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_lit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // primary_expr ::= operand 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // primary_expr ::= primary_expr selector 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // primary_expr ::= primary_expr index 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // primary_expr ::= primary_expr slice 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // primary_expr ::= primary_expr arguments 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // index ::= OPEN_SQUARE expression CLOSE_SQUARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // slice ::= OPEN_SQUARE sub_slice COLON sub_slice CLOSE_SQUARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // slice ::= OPEN_SQUARE sub_slice COLON expression COLON expression CLOSE_SQUARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sub_slice ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_slice",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sub_slice ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_slice",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arguments ::= OPEN_PARAN sub_arguments CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sub_arguments ::= sub_sub_arguments 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_arguments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sub_arguments ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_arguments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sub_sub_arguments ::= sub_type expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_arguments",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sub_type ::= sub_sub_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sub_type ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sub_sub_type ::= TYPE type COMMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // method_expr ::= DOT receiver_type DOT method_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_expr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // receiver_type ::= OPEN_PARAN ASTRISK type_name CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // receiver_type ::= OPEN_PARAN type_name CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver_type",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= declaration 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= return_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= break_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= block sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= if_stmt sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= switch_stmt sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= for_stmt sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sub_semi_colon ::= SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_semi_colon",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sub_semi_colon ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_semi_colon",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // simple_stmt ::= expression_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // simple_stmt ::= inc_dec_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_stmt ::= assignment 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_stmt ::= short_var_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_stmt ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inc_dec_stmt ::= expression sub_inc_dec_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sub_inc_dec_stmt ::= INCREMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_inc_dec_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sub_inc_dec_stmt ::= DECREMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_inc_dec_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment ::= expression_list assign_op expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_op ::= sub_assign_op EQUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sub_assign_op ::= add_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_assign_op",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sub_assign_op ::= mul_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_assign_op",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sub_assign_op ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_assign_op",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if_stmt ::= IF sub_if_stmt expression block sub_else_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sub_if_stmt ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_if_stmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sub_if_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_if_stmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sub_else_stmt ::= ELSE sub_sub_else_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_else_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sub_else_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_else_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sub_sub_else_stmt ::= if_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_else_stmt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sub_sub_else_stmt ::= block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_else_stmt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // switch_stmt ::= expr_switch_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_switch_stmt ::= SWITCH sub_expr_switch_stmt sub_expr_switch_expr_stmt OPEN_CURLY zero_expr_switch_stmt CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sub_expr_switch_stmt ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_stmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sub_expr_switch_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_stmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sub_expr_switch_expr_stmt ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_expr_stmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sub_expr_switch_expr_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_expr_stmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // zero_expr_switch_stmt ::= expr_case_clause zero_expr_switch_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_expr_switch_stmt",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // zero_expr_switch_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_expr_switch_stmt",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_case_clause ::= expr_switch_case COLON statement_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_switch_case ::= CASE expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_switch_case ::= DEFAULT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_stmt ::= FOR sub_for_stmt block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sub_for_stmt ::= condition 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_for_stmt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sub_for_stmt ::= for_clause 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_for_stmt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sub_for_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_for_stmt",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condition ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // for_clause ::= sub_init_stmt SEMI_COLON sub_condition SEMI_COLON sub_post_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_clause",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sub_init_stmt ::= init_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_init_stmt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sub_init_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_init_stmt",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sub_condition ::= condition 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_condition",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sub_condition ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_condition",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sub_post_stmt ::= post_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_post_stmt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sub_post_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_post_stmt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // init_stmt ::= simple_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_stmt",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // post_stmt ::= simple_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("post_stmt",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // return_stmt ::= RETURN sub_return_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sub_return_stmt ::= expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_return_stmt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sub_return_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_return_stmt",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // break_stmt ::= BREAK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // source_file ::= package_clause sub_semi_colon sub_import_decll sub_top_level_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_file",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sub_import_decll ::= import_decl sub_semi_colon sub_import_decll 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decll",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sub_import_decll ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decll",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sub_top_level_decl ::= top_level_decl sub_top_level_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_top_level_decl",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sub_top_level_decl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_top_level_decl",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // package_clause ::= PACKAGE package_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_clause",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // package_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_name",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // import_decl ::= IMPORT sub_import_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sub_import_decl ::= import_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sub_import_decl ::= OPEN_PARAN sub_sub_import_decl CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sub_sub_import_decl ::= import_spec sub_semi_colon sub_sub_import_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_import_decl",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sub_sub_import_decl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_import_decl",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // import_spec ::= sub_import_spec import_path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sub_import_spec ::= DOT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_spec",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sub_import_spec ::= package_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_spec",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sub_import_spec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_spec",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // import_path ::= STRING_TEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_path",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
