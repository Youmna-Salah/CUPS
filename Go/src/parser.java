
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\367\000\002\002\004\000\002\107\004\000\002\124" +
    "\003\000\002\124\003\000\002\124\003\000\002\124\003" +
    "\000\002\124\003\000\002\126\003\000\002\126\003\000" +
    "\002\126\003\000\002\127\003\000\002\127\003\000\002" +
    "\127\003\000\002\127\003\000\002\127\003\000\002\127" +
    "\003\000\002\217\003\000\002\217\003\000\002\217\003" +
    "\000\002\217\003\000\002\217\003\000\002\217\003\000" +
    "\002\130\003\000\002\130\003\000\002\131\003\000\002" +
    "\132\003\000\002\132\003\000\002\132\003\000\002\132" +
    "\003\000\002\133\006\000\002\134\003\000\002\221\003" +
    "\000\002\137\005\000\002\140\006\000\002\147\005\000" +
    "\002\147\002\000\002\150\004\000\002\151\003\000\002" +
    "\151\002\000\002\172\004\000\002\172\003\000\002\172" +
    "\002\000\002\173\004\000\002\141\003\000\002\141\002" +
    "\000\002\112\003\000\002\220\004\000\002\135\004\000" +
    "\002\152\003\000\002\152\002\000\002\216\003\000\002" +
    "\216\005\000\002\171\005\000\002\153\003\000\002\153" +
    "\002\000\002\155\004\000\002\210\005\000\002\210\002" +
    "\000\002\162\005\000\002\170\003\000\002\170\002\000" +
    "\002\027\003\000\002\051\005\000\002\156\003\000\002" +
    "\207\004\000\002\207\002\000\002\160\004\000\002\160" +
    "\004\000\002\160\004\000\002\100\003\000\002\100\004" +
    "\000\002\100\004\000\002\201\003\000\002\201\002\000" +
    "\002\157\004\000\002\163\003\000\002\163\005\000\002" +
    "\164\005\000\002\164\002\000\002\167\004\000\002\165" +
    "\005\000\002\166\003\000\002\166\002\000\002\174\004" +
    "\000\002\113\005\000\002\113\002\000\002\115\004\000" +
    "\002\114\005\000\002\114\002\000\002\010\003\000\002" +
    "\010\005\000\002\116\003\000\002\116\004\000\002\161" +
    "\004\000\002\117\003\000\002\117\004\000\002\121\006" +
    "\000\002\120\004\000\002\212\004\000\002\214\003\000" +
    "\002\214\005\000\002\202\005\000\002\202\002\000\002" +
    "\123\004\000\002\111\004\000\002\111\004\000\002\177" +
    "\004\000\002\177\002\000\002\053\005\000\002\213\005" +
    "\000\002\205\003\000\002\205\003\000\002\215\003\000" +
    "\002\143\004\000\002\206\003\000\002\211\006\000\002" +
    "\144\003\000\002\145\003\000\002\145\003\000\002\145" +
    "\003\000\002\145\005\000\002\204\003\000\002\204\003" +
    "\000\002\204\003\000\002\142\004\000\002\203\003\000" +
    "\002\203\003\000\002\203\006\000\002\203\003\000\002" +
    "\203\004\000\002\176\005\000\002\175\003\000\002\175" +
    "\002\000\002\110\004\000\002\002\005\000\002\002\002" +
    "\000\002\003\004\000\002\004\004\000\002\004\002\000" +
    "\002\005\003\000\002\005\003\000\002\007\003\000\002" +
    "\006\003\000\002\006\003\000\002\136\003\000\002\136" +
    "\003\000\002\146\003\000\002\146\003\000\002\011\006" +
    "\000\002\024\004\000\002\122\003\000\002\122\004\000" +
    "\002\122\004\000\002\122\004\000\002\122\004\000\002" +
    "\013\004\000\002\014\005\000\002\015\007\000\002\015" +
    "\011\000\002\016\003\000\002\016\002\000\002\017\005" +
    "\000\002\020\003\000\002\020\002\000\002\021\004\000" +
    "\002\022\003\000\002\022\002\000\002\023\005\000\002" +
    "\025\006\000\002\026\006\000\002\026\005\000\002\030" +
    "\003\000\002\030\004\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\004\000\002\031\003\000\002\031\002\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\033\003\000\002\034\004\000\002\035\003" +
    "\000\002\035\003\000\002\036\005\000\002\037\004\000" +
    "\002\040\003\000\002\040\003\000\002\040\002\000\002" +
    "\041\007\000\002\042\004\000\002\042\002\000\002\043" +
    "\004\000\002\043\002\000\002\044\003\000\002\044\003" +
    "\000\002\045\003\000\002\054\010\000\002\055\004\000" +
    "\002\055\002\000\002\056\003\000\002\056\002\000\002" +
    "\057\004\000\002\057\002\000\002\060\005\000\002\061" +
    "\004\000\002\061\003\000\002\052\005\000\002\063\003" +
    "\000\002\063\003\000\002\063\002\000\002\064\003\000" +
    "\002\065\007\000\002\066\003\000\002\066\002\000\002" +
    "\067\003\000\002\067\002\000\002\070\003\000\002\070" +
    "\002\000\002\071\003\000\002\072\003\000\002\047\004" +
    "\000\002\073\003\000\002\073\002\000\002\050\003\000" +
    "\002\101\006\000\002\105\005\000\002\105\002\000\002" +
    "\076\004\000\002\076\002\000\002\074\004\000\002\012" +
    "\003\000\002\077\004\000\002\075\003\000\002\075\005" +
    "\000\002\104\005\000\002\104\002\000\002\102\004\000" +
    "\002\103\003\000\002\103\003\000\002\103\002\000\002" +
    "\106\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\027\005\001\002\000\004\002\007\001" +
    "\002\000\004\033\006\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\107\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= package_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // package_list ::= PACKAGE IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_list",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // binary_op ::= OR_OPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // binary_op ::= AND_OP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // binary_op ::= REL_OP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // binary_op ::= add_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // binary_op ::= mul_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",82, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // add_op ::= PLUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // add_op ::= MINUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // add_op ::= SINGLE_OR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",84, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mul_op ::= ASTRISK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mul_op ::= DIVIDE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mul_op ::= PERCENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mul_op ::= SHIFTRIGHT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mul_op ::= SHIFTLEFT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mul_op ::= SINGLE_AND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",85, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unary_op ::= PLUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_op ::= MINUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_op ::= EXLIM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_op ::= ASTRISK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_op ::= SINGLE_AND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_op ::= INFER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",141, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= type_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",86, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",87, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_lit ::= array_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_lit ::= struct_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_lit ::= function_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_lit ::= slice_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // array_type ::= OPEN_SQUARE array_length CLOSE_SQUARE element_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",89, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_length ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_length",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // element_type ::= type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_type",143, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // slice_type ::= OPEN_SQUARE CLOSE_SQUARE element_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_type",93, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struct_type ::= STRUCT OPEN_CURLY zero_more_struct_type CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_type",94, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // zero_more_struct_type ::= field_decl SEMI_COLON zero_more_struct_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_struct_type",101, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // zero_more_struct_type ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_struct_type",101, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_decl ::= group_field_decl zero_one_tag 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",102, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // zero_one_tag ::= tag 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_tag",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // zero_one_tag ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_tag",103, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // group_field_decl ::= identifier_list type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_field_decl",120, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // group_field_decl ::= anonymous_field 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_field_decl",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // group_field_decl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_field_decl",120, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // anonymous_field ::= zero_one_astrisk type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anonymous_field",121, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // zero_one_astrisk ::= ASTRISK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_astrisk",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // zero_one_astrisk ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_astrisk",95, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tag ::= STRING_TEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",72, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_type ::= FUNC signature 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type",142, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // signature ::= parameters zero_one_result 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",91, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // zero_one_result ::= result 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_result",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // zero_one_result ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_result",104, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // result ::= parameters 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",140, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",140, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameters ::= OPEN_PARAN zero_one_param_list CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",119, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // zero_one_param_list ::= parameter_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_param_list",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // zero_one_param_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_param_list",105, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter_list ::= parameter_decl zero_more_parameter_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",107, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // zero_more_parameter_list ::= COMMA parameter_decl zero_more_parameter_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_parameter_list",134, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // zero_more_parameter_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_parameter_list",134, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter_decl ::= identifier_list zero_one_dot type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",112, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // zero_one_dot ::= DOTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_dot",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // zero_one_dot ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_dot",118, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block ::= OPEN_CURLY statment_list CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statment_list ::= zero_more_statment 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statment_list",108, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // zero_more_statment ::= statment zero_more_statment 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_statment",133, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // zero_more_statment ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_statment",133, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declartion ::= const_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declartion",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declartion ::= type_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declartion",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declartion ::= var_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declartion",110, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // top_level_decl ::= declartion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // top_level_decl ::= function_decl zero_one_semi 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // top_level_decl ::= method_decl zero_one_semi 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // zero_one_semi ::= SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_semi",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // zero_one_semi ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_semi",127, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // const_decl ::= CONST group_const_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",109, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // group_const_decl ::= const_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_const_decl",113, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // group_const_decl ::= OPEN_PARAN one_more_const_spec CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_const_decl",113, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // one_more_const_spec ::= const_spec SEMI_COLON one_more_const_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_more_const_spec",114, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // one_more_const_spec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_more_const_spec",114, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // const_spec ::= IDENTIFIER zero_one_const_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",117, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // zero_one_const_spec ::= zero_one_type EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_const_spec",115, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // zero_one_type ::= type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_type",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // zero_one_type ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_type",116, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // identifier_list ::= IDENTIFIER zero_more_identifier_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",122, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // zero_more_identifier_list ::= SEMI_COLON IDENTIFIER zero_more_identifier_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_identifier_list",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // zero_more_identifier_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_identifier_list",73, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_list ::= expression zero_more_expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // zero_more_expression_list ::= COMMA expression zero_more_expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_expression_list",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // zero_more_expression_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_expression_list",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= unary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression binary_op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unary_expr ::= primary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unary_expr ::= unary_op unary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // type_decl ::= TYPE group_type_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_decl",111, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // group_type_decl ::= type_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_type_decl",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // group_type_decl ::= OPEN_PARAN zero_more_group_type_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_type_decl",77, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // zero_more_group_type_decl ::= OPEN_PARAN type_spec CLOSE_PARAN SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_group_type_decl",79, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_spec ::= IDENTIFIER type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // var_decl ::= VAR group_var_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",136, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // group_var_decl ::= var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_decl",138, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // group_var_decl ::= OPEN_PARAN zero_more_var_spec CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_decl",138, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // zero_more_var_spec ::= var_spec SEMI_COLON zero_more_var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_var_spec",128, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // zero_more_var_spec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_var_spec",128, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // var_spec ::= IDENTIFIER group_var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",81, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // group_var_spec ::= type zero_one_expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_spec",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // group_var_spec ::= EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_spec",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // zero_one_expression ::= EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_expression",125, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // zero_one_expression ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_expression",125, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // short_var_decl ::= identifier_list COLON_EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("short_var_decl",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // function_decl ::= FUNC function_name group_function_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",137, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // group_function_decl ::= function 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_function_decl",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // group_function_decl ::= signature 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_function_decl",131, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",139, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function ::= signature function_body 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",97, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function_body ::= block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",132, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // method_decl ::= FUNC receiver method_name group_function_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",135, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // receiver ::= parameters 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",98, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operand ::= literal 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operand ::= operand_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operand ::= method_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",99, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",99, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // literal ::= basic_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // literal ::= composite_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // literal ::= function_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",130, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // composite_lit ::= literal_type literal_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("composite_lit",96, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // literal_type ::= struct_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal_type ::= array_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal_type ::= OPEN_SQUARE DOTS CLOSE_SQUARE element_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",129, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal_type ::= slice_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",129, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // literal_type ::= TYPE type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",129, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // literal_value ::= OPEN_CURLY zero_one_element_list CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_value",124, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // zero_one_element_list ::= element_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_element_list",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // zero_one_element_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_element_list",123, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // element_list ::= keyed_element sub_element_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sub_element_list ::= COMMA keyed_element sub_element_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_element_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sub_element_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_element_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // keyed_element ::= sub_keyed_element element 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("keyed_element",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sub_keyed_element ::= key COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_keyed_element",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sub_keyed_element ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_keyed_element",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // key ::= field_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // key ::= literal_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("key",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // field_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_name",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // element ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // element ::= literal_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // basic_lit ::= INT_LIT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // basic_lit ::= STRING_TEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_lit",92, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // operand_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // operand_name ::= qualified_ident 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand_name",100, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // qualified_ident ::= DOT package_name DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualified_ident",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // function_lit ::= FUNC function 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_lit",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // primary_expr ::= operand 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",80, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // primary_expr ::= primary_expr selector 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // primary_expr ::= primary_expr index 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // primary_expr ::= primary_expr slice 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // primary_expr ::= primary_expr arguments 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expr",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // index ::= OPEN_SQUARE expression CLOSE_SQUARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // slice ::= OPEN_SQUARE sub_slice COLON sub_slice CLOSE_SQUARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // slice ::= OPEN_SQUARE sub_slice COLON expression COLON expression CLOSE_SQUARE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sub_slice ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_slice",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sub_slice ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_slice",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // arguments ::= OPEN_PARAN sub_arguments CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sub_arguments ::= sub_sub_arguments 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_arguments",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sub_arguments ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_arguments",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sub_sub_arguments ::= sub_type expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_arguments",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sub_type ::= sub_sub_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sub_type ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sub_sub_type ::= TYPE type COMMA 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // method_expr ::= DOT receiver_type DOT method_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // receiver_type ::= OPEN_PARAN ASTRISK type_name CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // receiver_type ::= OPEN_PARAN type_name CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // statement ::= declaration 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // statement ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // statement ::= return_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // statement ::= break_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // statement ::= block sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // statement ::= if_stmt sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // statement ::= switch_stmt sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // statement ::= for_stmt sub_semi_colon 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // sub_semi_colon ::= SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_semi_colon",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // sub_semi_colon ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_semi_colon",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // simple_stmt ::= expression_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // simple_stmt ::= inc_dec_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // simple_stmt ::= assignment 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // simple_stmt ::= short_var_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_stmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expression_stmt ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_stmt",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // inc_dec_stmt ::= expression sub_inc_dec_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inc_dec_stmt",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sub_inc_dec_stmt ::= INCREMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_inc_dec_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // sub_inc_dec_stmt ::= DECREMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_inc_dec_stmt",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // assignment ::= expression_list assign_op expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // assign_op ::= sub_assign_op EQUAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // sub_assign_op ::= add_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_assign_op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // sub_assign_op ::= mul_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_assign_op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // sub_assign_op ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_assign_op",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // if_stmt ::= IF sub_if_stmt expression block sub_else_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sub_if_stmt ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_if_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sub_if_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_if_stmt",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // sub_else_stmt ::= ELSE sub_sub_else_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_else_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // sub_else_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_else_stmt",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // sub_sub_else_stmt ::= if_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_else_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // sub_sub_else_stmt ::= block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_else_stmt",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // switch_stmt ::= expr_switch_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch_stmt",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_switch_stmt ::= SWITCH sub_expr_switch_stmt sub_expr_switch_expr_stmt OPEN_CURLY zero_expr_switch_stmt CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_stmt",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // sub_expr_switch_stmt ::= simple_stmt SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_stmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // sub_expr_switch_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_stmt",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sub_expr_switch_expr_stmt ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_expr_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sub_expr_switch_expr_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_expr_switch_expr_stmt",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // zero_expr_switch_stmt ::= expr_case_clause zero_expr_switch_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_expr_switch_stmt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // zero_expr_switch_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_expr_switch_stmt",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_case_clause ::= expr_switch_case COLON statement_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_case_clause",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_switch_case ::= CASE expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_switch_case ::= DEFAULT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_switch_case",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // for_stmt ::= FOR sub_for_stmt block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sub_for_stmt ::= condition 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_for_stmt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sub_for_stmt ::= for_clause 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_for_stmt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sub_for_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_for_stmt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // condition ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // for_clause ::= sub_init_stmt SEMI_COLON sub_condition SEMI_COLON sub_post_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_clause",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // sub_init_stmt ::= init_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_init_stmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // sub_init_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_init_stmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // sub_condition ::= condition 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_condition",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // sub_condition ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_condition",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // sub_post_stmt ::= post_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_post_stmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // sub_post_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_post_stmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // init_stmt ::= simple_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_stmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // post_stmt ::= simple_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("post_stmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // return_stmt ::= RETURN sub_return_stmt 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sub_return_stmt ::= expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_return_stmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sub_return_stmt ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_return_stmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // break_stmt ::= BREAK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("break_stmt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // source_file ::= package_clause sub_semi_colon sub_import_decll sub_top_level_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("source_file",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // sub_import_decll ::= import_decl sub_semi_colon sub_import_decll 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decll",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // sub_import_decll ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decll",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // sub_top_level_decl ::= top_level_decl sub_top_level_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_top_level_decl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // sub_top_level_decl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_top_level_decl",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // package_clause ::= PACKAGE package_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_clause",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // package_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_name",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // import_decl ::= IMPORT sub_import_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_decl",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // sub_import_decl ::= import_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decl",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // sub_import_decl ::= OPEN_PARAN sub_sub_import_decl CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_decl",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // sub_sub_import_decl ::= import_spec sub_semi_colon sub_sub_import_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_import_decl",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // sub_sub_import_decl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_sub_import_decl",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // import_spec ::= sub_import_spec import_path 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_spec",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // sub_import_spec ::= DOT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_spec",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // sub_import_spec ::= package_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_spec",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // sub_import_spec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_import_spec",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // import_path ::= STRING_TEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("import_path",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
