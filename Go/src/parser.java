
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\002\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\121\003\000\002\121\003\000\002\121\003" +
    "\000\002\121\003\000\002\121\003\000\002\121\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\027\003\000\002\123\003" +
    "\000\002\032\005\000\002\033\006\000\002\042\005\000" +
    "\002\042\002\000\002\043\004\000\002\044\003\000\002" +
    "\044\002\000\002\067\004\000\002\067\003\000\002\067" +
    "\002\000\002\070\004\000\002\034\003\000\002\034\002" +
    "\000\002\005\003\000\002\122\004\000\002\030\004\000" +
    "\002\045\003\000\002\045\002\000\002\120\003\000\002" +
    "\120\005\000\002\066\005\000\002\046\003\000\002\046" +
    "\002\000\002\050\004\000\002\111\005\000\002\111\002" +
    "\000\002\055\005\000\002\065\003\000\002\065\002\000" +
    "\002\110\003\000\002\064\005\000\002\051\003\000\002" +
    "\107\004\000\002\107\002\000\002\053\004\000\002\053" +
    "\004\000\002\053\004\000\002\057\003\000\002\057\004" +
    "\000\002\057\004\000\002\076\003\000\002\076\002\000" +
    "\002\052\004\000\002\056\003\000\002\056\005\000\002" +
    "\060\005\000\002\060\002\000\002\063\004\000\002\061" +
    "\005\000\002\062\003\000\002\062\002\000\002\071\004" +
    "\000\002\006\005\000\002\006\002\000\002\010\004\000" +
    "\002\007\005\000\002\007\002\000\002\103\003\000\002" +
    "\103\005\000\002\011\003\000\002\011\004\000\002\054" +
    "\004\000\002\012\003\000\002\012\004\000\002\014\006" +
    "\000\002\013\004\000\002\114\004\000\002\116\003\000" +
    "\002\116\005\000\002\077\005\000\002\077\002\000\002" +
    "\016\004\000\002\004\004\000\002\004\004\000\002\074" +
    "\004\000\002\074\002\000\002\113\005\000\002\115\005" +
    "\000\002\105\003\000\002\105\003\000\002\117\003\000" +
    "\002\036\004\000\002\106\003\000\002\112\006\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\005\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\035\004\000\002\101\003\000" +
    "\002\101\003\000\002\101\006\000\002\101\003\000\002" +
    "\101\004\000\002\073\005\000\002\072\003\000\002\072" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\027\005\001\002\000\004\002\007\001" +
    "\002\000\004\033\006\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\005\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= package_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // package_list ::= PACKAGE IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("package_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // binary_op ::= OR_OPR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // binary_op ::= AND_OP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // binary_op ::= REL_OP 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // binary_op ::= add_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // binary_op ::= mul_op 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("binary_op",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // add_op ::= PLUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // add_op ::= MINUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // add_op ::= SINGLE_OR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("add_op",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // mul_op ::= ASTRISK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // mul_op ::= DIVIDE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mul_op ::= PERCENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mul_op ::= SHIFTRIGHT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mul_op ::= SHIFTLEFT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mul_op ::= SINGLE_AND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unary_op ::= PLUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unary_op ::= MINUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_op ::= EXLIM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_op ::= ASTRISK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_op ::= SINGLE_AND 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_op ::= INFER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_op",79, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= type_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_name",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_lit ::= array_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_lit ::= struct_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_lit ::= function_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_lit ::= slice_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_lit",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // array_type ::= OPEN_SQUARE array_length CLOSE_SQUARE element_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // array_length ::= expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("array_length",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // element_type ::= type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_type",81, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // slice_type ::= OPEN_SQUARE CLOSE_SQUARE element_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("slice_type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // struct_type ::= STRUCT OPEN_CURLY zero_more_struct_type CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("struct_type",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // zero_more_struct_type ::= field_decl SEMI_COLON zero_more_struct_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_struct_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // zero_more_struct_type ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_struct_type",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // field_decl ::= group_field_decl zero_one_tag 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // zero_one_tag ::= tag 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_tag",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // zero_one_tag ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_tag",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // group_field_decl ::= identifier_list type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_field_decl",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // group_field_decl ::= anonymous_field 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_field_decl",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // group_field_decl ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_field_decl",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // anonymous_field ::= zero_one_astrisk type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("anonymous_field",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // zero_one_astrisk ::= ASTRISK 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_astrisk",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // zero_one_astrisk ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_astrisk",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tag ::= STRING_TEXT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tag",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_type ::= FUNC signature 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type",80, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // signature ::= parameters zero_one_result 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // zero_one_result ::= result 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_result",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // zero_one_result ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_result",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // result ::= parameters 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",78, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameters ::= OPEN_PARAN zero_one_param_list CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // zero_one_param_list ::= parameter_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_param_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // zero_one_param_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_param_list",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter_list ::= parameter_decl zero_more_parameter_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // zero_more_parameter_list ::= COMMA parameter_decl zero_more_parameter_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_parameter_list",71, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // zero_more_parameter_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_parameter_list",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter_decl ::= identifier_list zero_one_dot type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_decl",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // zero_one_dot ::= DOTS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_dot",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // zero_one_dot ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_dot",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // method_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_name",70, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // block ::= OPEN_CURLY statment_list CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statment_list ::= zero_more_statment 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statment_list",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // zero_more_statment ::= statment zero_more_statment 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_statment",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // zero_more_statment ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_statment",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declartion ::= const_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declartion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declartion ::= type_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declartion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declartion ::= var_decl SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declartion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // top_level_decl ::= declartion 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // top_level_decl ::= function_decl zero_one_semi 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // top_level_decl ::= method_decl zero_one_semi 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("top_level_decl",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // zero_one_semi ::= SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_semi",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // zero_one_semi ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_semi",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // const_decl ::= CONST group_const_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_decl",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // group_const_decl ::= const_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_const_decl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // group_const_decl ::= OPEN_PARAN one_more_const_spec CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_const_decl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // one_more_const_spec ::= const_spec SEMI_COLON one_more_const_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_more_const_spec",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // one_more_const_spec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("one_more_const_spec",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // const_spec ::= IDENTIFIER zero_one_const_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_spec",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // zero_one_const_spec ::= zero_one_type EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_const_spec",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // zero_one_type ::= type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_type",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // zero_one_type ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_type",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // identifier_list ::= IDENTIFIER zero_more_identifier_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // zero_more_identifier_list ::= SEMI_COLON IDENTIFIER zero_more_identifier_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_identifier_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // zero_more_identifier_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_identifier_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_list ::= expression zero_more_expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // zero_more_expression_list ::= COMMA expression zero_more_expression_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_expression_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // zero_more_expression_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_expression_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= unary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= expression binary_op expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unary_expr ::= primary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unary_expr ::= unary_op unary_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unary_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // type_decl ::= TYPE group_type_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_decl",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // group_type_decl ::= type_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_type_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // group_type_decl ::= OPEN_PARAN zero_more_group_type_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_type_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // zero_more_group_type_decl ::= OPEN_PARAN type_spec CLOSE_PARAN SEMI_COLON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_group_type_decl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_spec ::= IDENTIFIER type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_spec",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // var_decl ::= VAR group_var_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_decl",74, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // group_var_decl ::= var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_decl",76, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // group_var_decl ::= OPEN_PARAN zero_more_var_spec CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_decl",76, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // zero_more_var_spec ::= var_spec SEMI_COLON zero_more_var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_var_spec",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // zero_more_var_spec ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_more_var_spec",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // var_spec ::= IDENTIFIER group_var_spec 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_spec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // group_var_spec ::= type zero_one_expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_spec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // group_var_spec ::= EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_var_spec",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // zero_one_expression ::= EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // zero_one_expression ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_expression",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // short_var_decl ::= identifier_list COLON_EQUAL expression 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("short_var_decl",73, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // function_decl ::= FUNC function_name group_function_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_decl",75, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // group_function_decl ::= function 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_function_decl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // group_function_decl ::= signature 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("group_function_decl",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // function_name ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_name",77, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function ::= signature function_body 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // function_body ::= block 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // method_decl ::= FUNC receiver method_name group_function_decl 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_decl",72, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // receiver ::= parameters 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operand ::= literal 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operand ::= operand_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operand ::= method_expr 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // literal ::= basic_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // literal ::= composite_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // literal ::= function_lit 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // composite_lit ::= literal_type literal_value 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("composite_lit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // literal_type ::= struct_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal_type ::= array_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal_type ::= OPEN_SQUARE DOTS CLOSE_SQUARE element_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal_type ::= slice_type 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // literal_type ::= TYPE type_name 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_type",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // literal_value ::= OPEN_CURLY zero_one_element_list CLOSE_CURLY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal_value",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // zero_one_element_list ::= element_list 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_element_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // zero_one_element_list ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero_one_element_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
