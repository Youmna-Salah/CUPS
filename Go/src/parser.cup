
import java_cup.runtime.*;


/* Terminals (tokens returned by the scanner). */
terminal String Const;
terminal String EQUAL;
terminal String PLUS;
terminal String INCREMENT;
terminal String DECREMENT;
terminal String MINUS;
terminal String VAR;
terminal String IF;
terminal String BREAK;
terminal String FUNC;
terminal String ASTRISK;
terminal String COLON_EQUAL;
terminal String PERCENT;
terminal String COMMENT;
terminal String AND_OP;
terminal String REL_OP;
terminal String RETURN;
terminal String SEMI_COLON;
terminal String OPEN_PARAN;
terminal String CLOSE_PARAN;
terminal String OPEN_SQUARE;
terminal String CLOSE_SQUARE;
terminal String GREATER_EQUAL;
terminal String SINGLE_OR;
terminal String STRING_TEXT;
terminal String OPEN_CURLY;
terminal String CLOSE_CURLY;
terminal String COMMA;
terminal String TYPE;
terminal String INT_LIT;
terminal String SMALLER;
terminal String GREATER;
terminal String EQUAL_EQUAL;
terminal String LESS_EQUAL;
terminal String SLASH;
terminal String SWITCH;
terminal String CASE;
terminal String DEFAULT;
terminal String FOR;
terminal String STRUCT;
terminal String OR_OPR;
terminal String IMPORT;
terminal String IDENTIFIER;
terminal String PACKAGE;
terminal String DOT;
terminal String COLON;
terminal String ELSE;
/* Non terminals */
non terminal  String   package_list;
non terminal  String   element_list;
non terminal  String   sub_element_list;
non terminal  String   keyed_element;
non terminal  String   sub_keyed_element;
non terminal  String   key;
non terminal  String   element;
non terminal  String   field_name;
non terminal  String   literal_value;
non terminal  String   expression;
non terminal  String   basic_lit;
non terminal  String   operand_name;
non terminal  String   qualified_ident;
non terminal  String   package_name;
non terminal  String   function;
non terminal  String   primary_expr;
non terminal  String   operand;
non terminal  String   selector;
non terminal  String   index;
non terminal  String   slice;
non terminal  String   sub_slice;
non terminal  String   arguments;
non terminal  String   sub_arguments;
non terminal  String   sub_sub_arguments;
non terminal  String   sub_type;
non terminal  String   sub_sub_type;
non terminal  String   function_lit;
non terminal  String   expression_list;
non terminal  String   type;
non terminal  String   method_expr;
non terminal  String   receiver_type;
non terminal  String   method_name;
non terminal  String   type_name;
non terminal  String   statement;
non terminal  String   sub_semi_colon;
non terminal  String   simple_stmt;
non terminal  String   expression_stmt;
non terminal  String   inc_dec_stmt;
non terminal  String   sub_inc_dec_stmt;
non terminal  String   assignment;
non terminal  String   assign_op;
non terminal  String   sub_assign_op;
non terminal  String   if_stmt;
non terminal  String   sub_if_stmt;
non terminal  String   sub_else_stmt;
non terminal  String   sub_sub_else_stmt;
non terminal  String   switch_stmt;
non terminal  String   declaration;
non terminal  String   return_stmt;
non terminal  String   break_stmt;
non terminal  String   block;
non terminal  String   for_stmt;
non terminal  String   short_var_decl;
non terminal  String   add_op;
non terminal  String   mul_op;
non terminal  String   expr_switch_stmt;
non terminal  String   sub_expr_switch_stmt;
non terminal  String   sub_expr_switch_expr_stmt;
non terminal  String   zero_expr_switch_stmt;
non terminal  String   expr_case_clause;
non terminal  String   expr_switch_case;
non terminal  String   statement_list;
non terminal  String   sub_for_stmt;
non terminal  String   condition;
non terminal  String   for_clause;
non terminal  String   sub_init_stmt;
non terminal  String   sub_condition;
non terminal  String   sub_post_stmt;
non terminal  String   init_stmt;
non terminal  String   post_stmt;
non terminal  String   sub_return_stmt;
non terminal  String   package_clause;
non terminal  String   sub_import_decl;
non terminal  String   sub_top_level_decl;
non terminal  String   import_decl;
non terminal  String   top_level_decl;
non terminal  String   source_file;
non terminal  String   import_spec;
non terminal  String   sub_import_spec;
non terminal  String   sub_sub_import_decl;
non terminal  String   sub_import_decll;
non terminal  String   import_path;

start with package_list ;
/* Precedences */

package_list ::=  PACKAGE IDENTIFIER;
element_list ::=  keyed_element sub_element_list;
sub_element_list ::= COMMA keyed_element sub_element_list|;
keyed_element ::= sub_keyed_element element;
sub_keyed_element ::= key COLON|;
key ::= field_name|literal_value;
field_name ::= IDENTIFIER;
element ::= expression|literal_value;
basic_lit ::= INT_LIT|STRING_TEXT;
operand_name ::= IDENTIFIER|qualified_ident;
qualified_ident ::= DOT package_name DOT IDENTIFIER;
function_lit ::= FUNC function;
primary_expr ::=operand|primary_expr selector|primary_expr index|primary_expr slice|primary_expr arguments;
selector ::=DOT IDENTIFIER;
index ::=OPEN_SQUARE expression CLOSE_SQUARE;
slice ::=OPEN_SQUARE sub_slice COLON sub_slice CLOSE_SQUARE|OPEN_SQUARE sub_slice COLON expression COLON expression CLOSE_SQUARE;
sub_slice ::= expression|;
arguments ::=OPEN_PARAN sub_arguments CLOSE_PARAN;
sub_arguments ::= sub_sub_arguments|;
sub_sub_arguments ::= sub_type expression_list;
sub_type ::= sub_sub_type|;
sub_sub_type ::= TYPE type COMMA;
method_expr ::= DOT receiver_type DOT method_name;
receiver_type ::= OPEN_PARAN ASTRISK type_name CLOSE_PARAN|OPEN_PARAN type_name CLOSE_PARAN;
statement ::= declaration|simple_stmt SEMI_COLON|return_stmt SEMI_COLON|break_stmt SEMI_COLON|block sub_semi_colon|if_stmt sub_semi_colon|switch_stmt sub_semi_colon|for_stmt sub_semi_colon;
sub_semi_colon ::=SEMI_COLON|;
simple_stmt ::=expression_stmt|inc_dec_stmt|assignment|short_var_decl;
expression_stmt ::=expression;
inc_dec_stmt ::=expression sub_inc_dec_stmt;
sub_inc_dec_stmt ::= INCREMENT |DECREMENT;
assignment ::= expression_list assign_op expression_list;
assign_op ::= sub_assign_op EQUAL;
sub_assign_op ::= add_op|mul_op|;
if_stmt ::= IF sub_if_stmt expression block sub_else_stmt;
sub_if_stmt ::= simple_stmt SEMI_COLON|;
sub_else_stmt ::= ELSE sub_sub_else_stmt|;
sub_sub_else_stmt ::= if_stmt |block;
switch_stmt ::= expr_switch_stmt;
expr_switch_stmt ::= SWITCH sub_expr_switch_stmt sub_expr_switch_expr_stmt OPEN_CURLY zero_expr_switch_stmt CLOSE_CURLY;
sub_expr_switch_stmt ::= simple_stmt SEMI_COLON|;
sub_expr_switch_expr_stmt ::= expression|;
zero_expr_switch_stmt ::= expr_case_clause zero_expr_switch_stmt|;
expr_case_clause ::= expr_switch_case COLON statement_list;
expr_switch_case ::= CASE expression_list|DEFAULT;
for_stmt ::= FOR sub_for_stmt block;
sub_for_stmt ::= condition|for_clause|;
condition ::= expression;
for_clause ::=sub_init_stmt SEMI_COLON sub_condition SEMI_COLON sub_post_stmt;
sub_init_stmt ::=init_stmt|;
sub_condition ::=condition|;
sub_post_stmt ::=post_stmt|;
init_stmt ::= simple_stmt;
post_stmt ::= simple_stmt;
return_stmt ::= RETURN sub_return_stmt;
sub_return_stmt ::= expression_list|;
break_stmt ::= BREAK;
source_file ::= package_clause sub_semi_colon sub_import_decll sub_top_level_decl;
sub_import_decll ::= import_decl sub_semi_colon sub_import_decll|;
sub_top_level_decl ::= top_level_decl sub_top_level_decl|;
package_clause ::= PACKAGE package_name;
package_name ::= IDENTIFIER;
import_decl ::= IMPORT sub_import_decl;
sub_import_decl ::= import_spec |OPEN_PARAN sub_sub_import_decl CLOSE_PARAN;
sub_sub_import_decl ::= import_spec sub_semi_colon sub_sub_import_decl|;
import_spec ::= sub_import_spec import_path;
sub_import_spec ::= DOT|package_name|;
import_path ::= STRING_TEXT;





